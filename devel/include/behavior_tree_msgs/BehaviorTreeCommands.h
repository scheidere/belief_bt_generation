// Generated by gencpp from file behavior_tree_msgs/BehaviorTreeCommands.msg
// DO NOT EDIT!


#ifndef BEHAVIOR_TREE_MSGS_MESSAGE_BEHAVIORTREECOMMANDS_H
#define BEHAVIOR_TREE_MSGS_MESSAGE_BEHAVIORTREECOMMANDS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <behavior_tree_msgs/BehaviorTreeCommand.h>

namespace behavior_tree_msgs
{
template <class ContainerAllocator>
struct BehaviorTreeCommands_
{
  typedef BehaviorTreeCommands_<ContainerAllocator> Type;

  BehaviorTreeCommands_()
    : commands()  {
    }
  BehaviorTreeCommands_(const ContainerAllocator& _alloc)
    : commands(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::behavior_tree_msgs::BehaviorTreeCommand_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::behavior_tree_msgs::BehaviorTreeCommand_<ContainerAllocator> >::other >  _commands_type;
  _commands_type commands;





  typedef boost::shared_ptr< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> const> ConstPtr;

}; // struct BehaviorTreeCommands_

typedef ::behavior_tree_msgs::BehaviorTreeCommands_<std::allocator<void> > BehaviorTreeCommands;

typedef boost::shared_ptr< ::behavior_tree_msgs::BehaviorTreeCommands > BehaviorTreeCommandsPtr;
typedef boost::shared_ptr< ::behavior_tree_msgs::BehaviorTreeCommands const> BehaviorTreeCommandsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator1> & lhs, const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator2> & rhs)
{
  return lhs.commands == rhs.commands;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator1> & lhs, const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace behavior_tree_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6602df19ee620e103a9a9693540b7d4a";
  }

  static const char* value(const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6602df19ee620e10ULL;
  static const uint64_t static_value2 = 0x3a9a9693540b7d4aULL;
};

template<class ContainerAllocator>
struct DataType< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "behavior_tree_msgs/BehaviorTreeCommands";
  }

  static const char* value(const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BehaviorTreeCommand[] commands\n"
"================================================================================\n"
"MSG: behavior_tree_msgs/BehaviorTreeCommand\n"
"string condition_name\n"
"int8 status\n"
;
  }

  static const char* value(const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.commands);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BehaviorTreeCommands_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::behavior_tree_msgs::BehaviorTreeCommands_<ContainerAllocator>& v)
  {
    s << indent << "commands[]" << std::endl;
    for (size_t i = 0; i < v.commands.size(); ++i)
    {
      s << indent << "  commands[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::behavior_tree_msgs::BehaviorTreeCommand_<ContainerAllocator> >::stream(s, indent + "    ", v.commands[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BEHAVIOR_TREE_MSGS_MESSAGE_BEHAVIORTREECOMMANDS_H
